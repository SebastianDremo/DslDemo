//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/sebas/RiderProjects/DslPresentation/DslPresentation/Grammar\DslLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class DslLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GET=1, THEN=2, SEND_EMAIL=3, END=4, ASTERIKS=5, COMMA=6, LEFT_PAREN=7, 
		RIGHT_PAREN=8, ID=9, STRING=10, NUMBER=11, SPACES=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"GET", "THEN", "SEND_EMAIL", "END", "ASTERIKS", "COMMA", "LEFT_PAREN", 
		"RIGHT_PAREN", "ID", "STRING", "NUMBER", "SPACES"
	};


	public DslLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DslLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'GET'", "'THEN'", "'SEND_EMAIL'", "'END'", "'*'", "','", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GET", "THEN", "SEND_EMAIL", "END", "ASTERIKS", "COMMA", "LEFT_PAREN", 
		"RIGHT_PAREN", "ID", "STRING", "NUMBER", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DslLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DslLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,82,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,4,8,59,8,8,11,8,12,8,60,1,9,1,9,4,
		9,65,8,9,11,9,12,9,66,1,9,1,9,1,10,4,10,72,8,10,11,10,12,10,73,1,11,4,
		11,77,8,11,11,11,12,11,78,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,1,0,4,3,0,65,90,95,95,97,122,1,0,34,34,1,
		0,48,57,3,0,9,10,13,13,32,32,85,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,29,1,0,0,0,5,
		34,1,0,0,0,7,45,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,0,15,55,
		1,0,0,0,17,58,1,0,0,0,19,62,1,0,0,0,21,71,1,0,0,0,23,76,1,0,0,0,25,26,
		5,71,0,0,26,27,5,69,0,0,27,28,5,84,0,0,28,2,1,0,0,0,29,30,5,84,0,0,30,
		31,5,72,0,0,31,32,5,69,0,0,32,33,5,78,0,0,33,4,1,0,0,0,34,35,5,83,0,0,
		35,36,5,69,0,0,36,37,5,78,0,0,37,38,5,68,0,0,38,39,5,95,0,0,39,40,5,69,
		0,0,40,41,5,77,0,0,41,42,5,65,0,0,42,43,5,73,0,0,43,44,5,76,0,0,44,6,1,
		0,0,0,45,46,5,69,0,0,46,47,5,78,0,0,47,48,5,68,0,0,48,8,1,0,0,0,49,50,
		5,42,0,0,50,10,1,0,0,0,51,52,5,44,0,0,52,12,1,0,0,0,53,54,5,40,0,0,54,
		14,1,0,0,0,55,56,5,41,0,0,56,16,1,0,0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,
		60,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,18,1,0,0,0,62,64,5,34,0,0,63,
		65,8,1,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,
		68,1,0,0,0,68,69,5,34,0,0,69,20,1,0,0,0,70,72,7,2,0,0,71,70,1,0,0,0,72,
		73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,22,1,0,0,0,75,77,7,3,0,0,76,
		75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,80,
		81,6,11,0,0,81,24,1,0,0,0,5,0,60,66,73,78,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
