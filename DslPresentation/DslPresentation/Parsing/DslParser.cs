//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/sebas/RiderProjects/DslPresentation/DslPresentation/Grammar\DslParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class DslParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GET=1, THEN=2, SEND_EMAIL=3, END=4, ASTERIKS=5, COMMA=6, LEFT_PAREN=7, 
		RIGHT_PAREN=8, ID=9, STRING=10, NUMBER=11, SPACES=12;
	public const int
		RULE_dsl_batch = 0, RULE_script = 1, RULE_get_all = 2, RULE_get_simple = 3, 
		RULE_then_logic = 4, RULE_built_in_function = 5, RULE_send_email = 6, 
		RULE_end_script = 7;
	public static readonly string[] ruleNames = {
		"dsl_batch", "script", "get_all", "get_simple", "then_logic", "built_in_function", 
		"send_email", "end_script"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GET'", "'THEN'", "'SEND_EMAIL'", "'END'", "'*'", "','", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GET", "THEN", "SEND_EMAIL", "END", "ASTERIKS", "COMMA", "LEFT_PAREN", 
		"RIGHT_PAREN", "ID", "STRING", "NUMBER", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DslParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DslParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DslParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DslParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Dsl_batchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext[] script() {
			return GetRuleContexts<ScriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script(int i) {
			return GetRuleContext<ScriptContext>(i);
		}
		public Dsl_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dsl_batch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterDsl_batch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitDsl_batch(this);
		}
	}

	[RuleVersion(0)]
	public Dsl_batchContext dsl_batch() {
		Dsl_batchContext _localctx = new Dsl_batchContext(Context, State);
		EnterRule(_localctx, 0, RULE_dsl_batch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << THEN) | (1L << END))) != 0)) {
				{
				{
				State = 16;
				script();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Get_allContext get_all() {
			return GetRuleContext<Get_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_simpleContext get_simple() {
			return GetRuleContext<Get_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Then_logicContext then_logic() {
			return GetRuleContext<Then_logicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_scriptContext end_script() {
			return GetRuleContext<End_scriptContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				get_all();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				get_simple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24;
				then_logic();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 25;
				end_script();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_allContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(DslParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIKS() { return GetToken(DslParser.ASTERIKS, 0); }
		public Get_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterGet_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitGet_all(this);
		}
	}

	[RuleVersion(0)]
	public Get_allContext get_all() {
		Get_allContext _localctx = new Get_allContext(Context, State);
		EnterRule(_localctx, 4, RULE_get_all);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(GET);
			State = 29;
			Match(ASTERIKS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(DslParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(DslParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(DslParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DslParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DslParser.COMMA, i);
		}
		public Get_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterGet_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitGet_simple(this);
		}
	}

	[RuleVersion(0)]
	public Get_simpleContext get_simple() {
		Get_simpleContext _localctx = new Get_simpleContext(Context, State);
		EnterRule(_localctx, 6, RULE_get_simple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(GET);
			State = 32;
			Match(ID);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 33;
				Match(COMMA);
				State = 34;
				Match(ID);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_logicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DslParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Built_in_functionContext built_in_function() {
			return GetRuleContext<Built_in_functionContext>(0);
		}
		public Then_logicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterThen_logic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitThen_logic(this);
		}
	}

	[RuleVersion(0)]
	public Then_logicContext then_logic() {
		Then_logicContext _localctx = new Then_logicContext(Context, State);
		EnterRule(_localctx, 8, RULE_then_logic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(THEN);
			State = 41;
			built_in_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Send_emailContext send_email() {
			return GetRuleContext<Send_emailContext>(0);
		}
		public Built_in_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterBuilt_in_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitBuilt_in_function(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionContext built_in_function() {
		Built_in_functionContext _localctx = new Built_in_functionContext(Context, State);
		EnterRule(_localctx, 10, RULE_built_in_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			send_email();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_emailContext : ParserRuleContext {
		public IToken message;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEND_EMAIL() { return GetToken(DslParser.SEND_EMAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(DslParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(DslParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DslParser.STRING, 0); }
		public Send_emailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_email; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterSend_email(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitSend_email(this);
		}
	}

	[RuleVersion(0)]
	public Send_emailContext send_email() {
		Send_emailContext _localctx = new Send_emailContext(Context, State);
		EnterRule(_localctx, 12, RULE_send_email);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(SEND_EMAIL);
			State = 46;
			Match(LEFT_PAREN);
			State = 47;
			_localctx.message = Match(STRING);
			State = 48;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_scriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(DslParser.END, 0); }
		public End_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.EnterEnd_script(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDslParserListener typedListener = listener as IDslParserListener;
			if (typedListener != null) typedListener.ExitEnd_script(this);
		}
	}

	[RuleVersion(0)]
	public End_scriptContext end_script() {
		End_scriptContext _localctx = new End_scriptContext(Context, State);
		EnterRule(_localctx, 14, RULE_end_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,53,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,1,1,1,1,1,1,1,3,1,27,8,1,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,5,3,36,8,3,10,3,12,3,39,9,3,1,4,1,4,1,4,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,0,49,0,19,1,0,
		0,0,2,26,1,0,0,0,4,28,1,0,0,0,6,31,1,0,0,0,8,40,1,0,0,0,10,43,1,0,0,0,
		12,45,1,0,0,0,14,50,1,0,0,0,16,18,3,2,1,0,17,16,1,0,0,0,18,21,1,0,0,0,
		19,17,1,0,0,0,19,20,1,0,0,0,20,1,1,0,0,0,21,19,1,0,0,0,22,27,3,4,2,0,23,
		27,3,6,3,0,24,27,3,8,4,0,25,27,3,14,7,0,26,22,1,0,0,0,26,23,1,0,0,0,26,
		24,1,0,0,0,26,25,1,0,0,0,27,3,1,0,0,0,28,29,5,1,0,0,29,30,5,5,0,0,30,5,
		1,0,0,0,31,32,5,1,0,0,32,37,5,9,0,0,33,34,5,6,0,0,34,36,5,9,0,0,35,33,
		1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,7,1,0,0,0,39,37,1,
		0,0,0,40,41,5,2,0,0,41,42,3,10,5,0,42,9,1,0,0,0,43,44,3,12,6,0,44,11,1,
		0,0,0,45,46,5,3,0,0,46,47,5,7,0,0,47,48,5,10,0,0,48,49,5,8,0,0,49,13,1,
		0,0,0,50,51,5,4,0,0,51,15,1,0,0,0,3,19,26,37
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
